#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Konductor | Devkit | Build VPC' 
  hosts: local
  vars:
    module: "build"
    state_provider: "local"
    tf_module_path: "{{ dir_terraform }}/devkit-vpc"
    ansible_name_module: " Konductor | Devkit VPC | {{ module }}"
  vars_files:
    - vars/global.yml

  vars_prompt:
    - name: cloud_region
      prompt: "Please enter your AWS region"
      private: no
    - name: cluster_name
      prompt: "Please enter your AWS VPC Name"
      private: no
    - name: aws_access_key
      prompt: "Please enter your AWS Access Key ID"
      private: no
    - name: aws_secret_key
      prompt: "Please enter your AWS Access Key Secret"
      private: no
    - name: cluster_domain
      prompt: "Please enter the top level Domain space"
      private: no

  tasks:

    - name: '{{ ansible_name_module }} | file | Create ~/.aws'
      file:
        path: "/root/.aws"
        state: directory

    ####### Stage Variables & AWS Creds
    - name: '{{ ansible_name_module }} | template | Terraform Vars & aws credentials'
      template:
        src: "{{ item.name }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop: 
        - { mode: '755', name: "templates/terraform/global.tfvars.j2", dest: "{{ tf_module_path }}/global.tfvars"}
        - { mode: '600', name: "templates/aws/credentials.j2", dest: "{{ local_home }}/.aws/credentials"}

    ####### Symlinks
    - name: '{{ ansible_name_module }} | variable | Create Provider symlink'
      file:
        src: "{{ tf_module_path }}/provider.tf"
        dest: "{{ item }}"
        state: link
      loop:
        - "{{ tf_module_path }}/vpc/provider.tf"
        - "{{ tf_module_path }}/security-groups/provider.tf"

    ####### Terraform Init
    - name: '{{ ansible_name_module }} | shell | terraform init'
      shell: terraform init
      loop:
        - "{{ tf_module_path }}"

    ####### Terraform Apply
    - name: '{{ ansible_name_module }} | terraform | apply'
      terraform:
        project_path: "{{ tf_module_path }}"
        variables_file: "{{ tf_module_path }}/global.tfvars"
        force_init: true
        state: present
      register: tf_output



#   ####### Purge SSH known_hosts entries if previous entries found
#   - name: '{{ ansible_name_module }} | lineinfile | purge previous known_hosts entries'
#     lineinfile:
#       dest: "{{ local_home }}/.ssh/known_hosts"
#       regexp: "{{ item.regex }}"
#       state: absent
#     with_items:
#       - { regex: ensign }
#       - { regex: '{{ tf_output.outputs.public_ipv4.value }}' }
#
#   ####### Declare result & public address of instance
#   - name: 'Ensign Public IP Address'
#     debug: 
#       msg:
#       - "New instance created at the following ip address:"
#       - "{{ tf_output.outputs.public_ipv4.value }}"
